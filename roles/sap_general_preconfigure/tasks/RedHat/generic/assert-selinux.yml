---

- name: Get info about file '/etc/selinux/config'
  ansible.builtin.stat:
    path: /etc/selinux/config
  register: __sap_general_preconfigure_register_stat_selinux_conf_assert

- name: Assert that file '/etc/selinux/config' exists and is a regular file
  ansible.builtin.assert:
    that: __sap_general_preconfigure_register_stat_selinux_conf_assert.stat.isreg
    fail_msg: "FAIL: File /etc/selinux/config does not exist or is not a regular file!"
#    success_msg: "PASS: File /etc/selinux/config exists and is a regular file."
  ignore_errors: "{{ sap_general_preconfigure_assert_ignore_errors | d(false) }}"

- name: Info about SELinux being set to 'enforcing'
  ansible.builtin.debug:
    msg: "INFO: The SELinux state has been set to 'enforcing' (variable sap_general_preconfigure_selinux_state)."
  ignore_errors: yes
  when: "sap_general_preconfigure_selinux_state == 'enforcing'"

- name: Warn about how SELinux would be set when role is run in normal mode
  ansible.builtin.debug:
    msg: "INFO: When running in normal mode, the role will set the SELinux state to '{{ sap_general_preconfigure_selinux_state }}'
          (variable sap_general_preconfigure_selinux_state)."
  ignore_errors: yes
  when: "sap_general_preconfigure_selinux_state != 'enforcing'"

- name: "Check if the permanent configuration of the SELinux state is '{{ sap_general_preconfigure_selinux_state }}'"
  ansible.builtin.command: awk 'BEGIN{FS="="}/^SELINUX=/{print $NF}' /etc/selinux/config
  register: __sap_general_preconfigure_register_selinux_conf_assert
  changed_when: false
  ignore_errors: yes
  when: __sap_general_preconfigure_register_stat_selinux_conf_assert.stat.isreg

- name: "Assert that the permanent configuration of the SELinux state is set to '{{ sap_general_preconfigure_selinux_state }}'"
  ansible.builtin.assert:
    that: __sap_general_preconfigure_register_selinux_conf_assert.stdout == sap_general_preconfigure_selinux_state
    fail_msg: "FAIL: The system is not configured for the SELinux state of '{{ sap_general_preconfigure_selinux_state }}'.
               Current configuration: '{{ __sap_general_preconfigure_register_selinux_conf_assert.stdout }}'."
    success_msg: "PASS: The system is configured for the SELinux state of '{{ sap_general_preconfigure_selinux_state }}'"
  ignore_errors: "{{ sap_general_preconfigure_assert_ignore_errors | d(false) }}"
  when: __sap_general_preconfigure_register_stat_selinux_conf_assert.stat.isreg

- name: Assert - Determine the current SELinux state
  ansible.builtin.command: getenforce
  register: __sap_general_preconfigure_register_getenforce_assert
  changed_when: false

- name: Assert that the SELinux state is set correctly
  ansible.builtin.assert:
    that: (__sap_general_preconfigure_register_getenforce_assert.stdout | lower) == sap_general_preconfigure_selinux_state
    fail_msg: "FAIL: SELinux is currently not '{{ sap_general_preconfigure_selinux_state }}'!
               The current SELinux state is: '{{ __sap_general_preconfigure_register_getenforce_assert.stdout | lower }}'."
    success_msg: "PASS: SELinux is currently {{ sap_general_preconfigure_selinux_state }}."
  ignore_errors: "{{ sap_general_preconfigure_assert_ignore_errors | d(false) }}"

# Reason for noqa: Both yum and dnf support "state: latest"
- name: Install the package which provides the semanage command # noqa package-latest
  ansible.builtin.package:
    state: latest
    name: policycoreutils-python-utils
  when:
    - sap_general_preconfigure_modify_selinux_labels
    - ansible_distribution_major_version != '7'

- name: Check if the directory '/usr/sap' exists
  ansible.builtin.stat:
    path: '/usr/sap'
  register: __sap_general_preconfigure_register_stat_usr_sap
  failed_when: false
  when: sap_general_preconfigure_modify_selinux_labels

- name: Report that SELinux checking will not be performed if the directory '/usr/sap' does not exist
  ansible.builtin.debug:
    msg: "INFO: SELinux checks will not be run because the directory '/usr/sap' does not exist."
  when:
    - sap_general_preconfigure_modify_selinux_labels
    - not __sap_general_preconfigure_register_stat_usr_sap.stat.exists or
        (__sap_general_preconfigure_register_stat_usr_sap.stat.isdir is defined and
           not __sap_general_preconfigure_register_stat_usr_sap.stat.isdir)

- name: Count SELinux configuration database entries for '/usr/sap'
  ansible.builtin.shell: set -o pipefail && semanage fcontext -l | awk 'BEGIN{a=0}$1=="/usr/sap(/.*)?"&&$NF~/usr_t/{a++}END{print a}'
  register: __sap_general_preconfigure_register_semanage_fcontext_usr_sap
  changed_when: false
  when:
    - sap_general_preconfigure_modify_selinux_labels
    - __sap_general_preconfigure_register_stat_usr_sap.stat.isdir is defined and __sap_general_preconfigure_register_stat_usr_sap.stat.isdir

- name: Assert that there is an entry for '/usr/sap' in the SELinux configuration database
  ansible.builtin.assert:
    that: (__sap_general_preconfigure_register_semanage_fcontext_usr_sap.stdout | int) != 0
    fail_msg: "FAIL: There is no entry for '/usr/sap' in the SELinux configuration database!"
    success_msg: "PASS: There is an entry for '/usr/sap' in the SELinux configuration database."
  ignore_errors: "{{ sap_general_preconfigure_assert_ignore_errors | d(false) }}"
  when:
    - sap_general_preconfigure_modify_selinux_labels
    - __sap_general_preconfigure_register_stat_usr_sap.stat.isdir is defined and __sap_general_preconfigure_register_stat_usr_sap.stat.isdir

- name: Count files in '/usr/sap' and below without SELinux 'usr_t' file context
  ansible.builtin.shell: "set -o pipefail && ls -1RZ /usr/sap | awk 'BEGIN{a=0}!/^$/&&NF>1&&$1!~/usr_t/{a++}END{print a}'"
  register: __sap_general_preconfigure_register_ls_z_usr_sap
  changed_when: false
  when:
    - sap_general_preconfigure_modify_selinux_labels
    - __sap_general_preconfigure_register_stat_usr_sap.stat.isdir is defined and __sap_general_preconfigure_register_stat_usr_sap.stat.isdir

- name: Assert that all files in '/usr/sap' and below have the 'usr_t' file context
  ansible.builtin.assert:
    that: (__sap_general_preconfigure_register_ls_z_usr_sap.stdout | int) == 0
    fail_msg: "FAIL: There is at least one file in '/usr/sap' or below without the 'usr_t' file context!"
    success_msg: "PASS: All files in '/usr/sap' and below have the 'usr_t' file context."
  ignore_errors: "{{ sap_general_preconfigure_assert_ignore_errors | d(false) }}"
  when:
    - sap_general_preconfigure_modify_selinux_labels
    - __sap_general_preconfigure_register_stat_usr_sap.stat.isdir is defined and __sap_general_preconfigure_register_stat_usr_sap.stat.isdir
