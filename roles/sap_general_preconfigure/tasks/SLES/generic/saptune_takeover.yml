# SPDX-License-Identifier: Apache-2.0
---
# 1275776 - Linux: Preparing SLES for SAP environments

- name: Execute saptune_check - before takeover
  ansible.builtin.command:
    cmd: saptune_check
  register: __sap_general_preconfigure_register_saptune_check_before
  when: __sap_general_preconfigure_use_saptune
  changed_when: false
  failed_when: false

- name: Takeover and enable saptune
  when:
    - __sap_general_preconfigure_use_saptune
    - __sap_general_preconfigure_register_saptune_check_before.rc != 0
  block:
    - name: Check saptune version  # noqa: command-instead-of-module
      ansible.builtin.command:
        cmd: rpm -q sapconf
      register: __sap_general_preconfigure_register_sapconf
      changed_when: false
      ignore_errors: true

    - name: Ensure sapconf is stopped and disabled
      ansible.builtin.systemd:
        name: sapconf
        state: stopped
        enabled: false
      when: __sap_general_preconfigure_register_sapconf

    - name: Make sure that sapconf and tuned are stopped and disabled
      ansible.builtin.command:
        cmd: "saptune service takeover"
      register: __sap_general_preconfigure_register_saptune_takeover
      changed_when: __sap_general_preconfigure_register_saptune_takeover.rc == 0

    # saptune_check can fail if sapconf is in failed state
    - name: Check if sapconf.service is failed  # noqa command-instead-of-module
      ansible.builtin.command:
        cmd: systemctl is-failed sapconf.service
      register: __sap_general_preconfigure_register_sapconf_failed
      changed_when: false
      ignore_errors: true

    - name: Execute systemctl reset-failed sapconf.service  # noqa command-instead-of-module
      ansible.builtin.command:
        cmd: systemctl reset-failed sapconf.service
      when: __sap_general_preconfigure_register_sapconf_failed.rc == 0
      changed_when: true

    - name: Ensure saptune is running and enabled
      ansible.builtin.systemd:
        name: saptune
        state: started
        enabled: true

    - name: Ensure saptune_check executes correctly
      ansible.builtin.command:
        cmd: saptune_check
      register: __sap_general_preconfigure_register_saptune_check_after
      changed_when: false


- name: Block to show current enabled saptune solution
  when:
    - __sap_general_preconfigure_use_saptune
    - __sap_general_preconfigure_register_saptune_check_before.rc == 0
      or (__sap_general_preconfigure_register_saptune_check_after.rc == 0)
  block:
    - name: Get current enabled saptune solution
      ansible.builtin.command:
        cmd: saptune solution enabled
      register: __sap_general_preconfigure_register_saptune_enabled
      changed_when: false
      failed_when: false

    # Enabled solution contains newline, which has to be removed
    - name: Cleanup saptune solution enabled output
      ansible.builtin.set_fact:
        __sap_general_preconfigure_register_saptune_enabled_trim:
          "{{ __sap_general_preconfigure_register_saptune_enabled.stdout | trim | replace('\n', '') }}"

    - name: Show current enabled saptune solution
      ansible.builtin.debug:
        msg: "{{ __sap_general_preconfigure_register_saptune_enabled_trim }}"
      when: __sap_general_preconfigure_register_saptune_enabled_trim != ''


- name: Enable sapconf
  when: not __sap_general_preconfigure_use_saptune
  block:
    - name: Enable sapconf service
      ansible.builtin.systemd:
        name: sapconf
        state: started
        enabled: true

    - name: Restart sapconf service
      ansible.builtin.systemd:
        name: sapconf
        state: restarted
