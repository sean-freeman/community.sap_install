# SPDX-License-Identifier: Apache-2.0
---

- name: SAP HA AnyDB - IBM Db2 HADR (AWS) - Fence Agent Packages for RHEL
  ansible.builtin.package:
    name:
      - fence-agents-aws
      - awscli
    state: present
  when: ansible_os_family == 'RedHat'

- name: SAP HA AnyDB - IBM Db2 HADR (AWS) - Fence Agent Packages for SLES
  ansible.builtin.package:
    name:
      - fence-agents
      - awscli
    state: present
  when: ansible_os_family == 'Suse'

# IBM Db2 HADR on AWS EC2 VS
# www.ibm.com/support/pages/node/6829815
# www.ibm.com/support/pages/node/6830009
# Older documentation - www.ibm.com/support/pages/node/6359159
# Older documentation - www.ibm.com/support/pages/node/6359155


# db2cm script must run as root
# When Virtual IP is already attached to OS Network Interface as Secondary IP
# (in advance by sap_vm_temp_vip or previous db2cm run), will cause
# "Error: ip address is pingable, use another ip address in the subnet that is not pingable."
# Reasons for noqa:
# - no-changed-when: Db2 command will error if already exists and not perform changes
- name: SAP HA AnyDB - IBM Db2 HADR (AWS) - Primary Node - Create Virtual IP address for Primary Node using db2cm # noqa no-changed-when
  ansible.builtin.shell: |
    export ibmdb2_sid="{{ sap_ha_install_anydb_ibmdb2_sid }}"
    export ibmdb2_instance="db2{{ sap_ha_install_anydb_ibmdb2_sid | lower }}"
    /db2/$ibmdb2_instance/sqllib/bin/db2cm -create -primaryVIP "{{ sap_ha_install_anydb_ibmdb2_vip_primary_ip_address }}" -db $ibmdb2_sid -instance $ibmdb2_instance
  register: __sap_ha_install_anydb_ibmdb2_config_aws_1
  when:
    - sap_ha_install_anydb_ibmdb2_hostname_primary == inventory_hostname_short
    - __sap_ha_install_anydb_ibmdb2_platform == "cloud_aws_ec2_vs"
  failed_when: not __sap_ha_install_anydb_ibmdb2_config_aws_1.rc == 0 and not 'already exists in the resource model' in __sap_ha_install_anydb_ibmdb2_config_aws_1.stdout

# Setting to be performed on both Primary and Secondary node
# Reasons for noqa:
# - no-changed-when: Db2 mandates use of AWS CLI for credentials instead of credential configuration directly via IBM Db2 selected Pacemaker Shell (crmsh)
- name: SAP HA AnyDB - IBM Db2 HADR (AWS) - Primary and Secondary Node - Provide AWS CLI credentials # noqa no-changed-when
  ansible.builtin.shell: |
    aws configure set aws_access_key_id "{{ sap_ha_install_anydb_ibmdb2_aws_access_key_id }}"
    aws configure set aws_secret_access_key "{{ sap_ha_install_anydb_ibmdb2_aws_secret_access_key }}"
  register: __sap_ha_install_anydb_ibmdb2_config_aws_credentials
  when:
    - __sap_ha_install_anydb_ibmdb2_platform == "cloud_aws_ec2_vs"

# db2cm script must run as root
# Reasons for noqa:
# - no-changed-when: Db2 command will error if already exists and not perform changes
- name: SAP HA AnyDB - IBM Db2 HADR (AWS) - Primary Node - Create Linux Pacemaker Fence Agent instantiation using db2cm # noqa no-changed-when
  ansible.builtin.shell: |
    export ibmdb2_sid="{{ sap_ha_install_anydb_ibmdb2_sid }}"
    export ibmdb2_instance="db2{{ sap_ha_install_anydb_ibmdb2_sid | lower }}"
    /db2/$ibmdb2_instance/sqllib/bin/db2cm -create -aws -fence
  register: __sap_ha_install_anydb_ibmdb2_config_aws_2
  when:
    - sap_ha_install_anydb_ibmdb2_hostname_primary == inventory_hostname_short
    - __sap_ha_install_anydb_ibmdb2_platform == "cloud_aws_ec2_vs"
  failed_when: not __sap_ha_install_anydb_ibmdb2_config_aws_2.rc == 0 and not 'already configured' in __sap_ha_install_anydb_ibmdb2_config_aws_2.stdout

# db2cm script must run as root
# Reasons for noqa:
# - no-changed-when: Db2 command will error if already exists and not perform changes
- name: SAP HA AnyDB - IBM Db2 HADR (AWS) - Primary Node - Create Linux Pacemaker Resource Agent instantiation for aws-vpc-move-ip using db2cm # noqa no-changed-when
  ansible.builtin.shell: |
    export ibmdb2_sid="{{ sap_ha_install_anydb_ibmdb2_sid }}"
    export ibmdb2_instance="db2{{ sap_ha_install_anydb_ibmdb2_sid | lower }}"
    /db2/$ibmdb2_instance/sqllib/bin/db2cm -create -aws -primaryVIP "{{ sap_ha_install_anydb_ibmdb2_vip_primary_ip_address }}" -rtb "{{ sap_ha_install_anydb_ibmdb2_aws_vip_update_rt }}" -db $ibmdb2_sid -instance $ibmdb2_instance
  register: __sap_ha_install_anydb_ibmdb2_config_aws_3
  when:
    - sap_ha_install_anydb_ibmdb2_hostname_primary == inventory_hostname_short
    - __sap_ha_install_anydb_ibmdb2_platform == "cloud_aws_ec2_vs"
  failed_when: not __sap_ha_install_anydb_ibmdb2_config_aws_3.rc == 0 and not 'already exists' in __sap_ha_install_anydb_ibmdb2_config_aws_3.stdout

# db2cm script must run as root
# Reasons for noqa:
# - no-changed-when: Db2 command will error if already exists and not perform changes
- name: SAP HA AnyDB - IBM Db2 HADR (AWS) - Primary Node - Start Linux Pacemaker cluster and IBM Db2 HADR functionality # noqa no-changed-when
  ansible.builtin.shell: |
    export ibmdb2_sid="{{ sap_ha_install_anydb_ibmdb2_sid }}"
    export ibmdb2_instance="db2{{ sap_ha_install_anydb_ibmdb2_sid | lower }}"
    export anydb_primary="{{ sap_ha_install_anydb_ibmdb2_hostname_primary }}"
    export anydb_secondary="{{ sap_ha_install_anydb_ibmdb2_hostname_secondary }}"

    # Assume 1 OS Network Interface until improvements can be made
    export anydb_primary_nic="{{ hostvars[sap_ha_install_anydb_ibmdb2_hostname_primary].ansible_default_ipv4.interface }}"
    export anydb_secondary_nic="{{ hostvars[sap_ha_install_anydb_ibmdb2_hostname_secondary].ansible_default_ipv4.interface }}"

    /db2/$ibmdb2_instance/sqllib/bin/db2cm -enable -all
    /db2/$ibmdb2_instance/sqllib/bin/db2cm -enable -instance $ibmdb2_instance -host $anydb_primary -publicEthernet $anydb_primary_nic -host $anydb_secondary -publicEthernet $anydb_secondary_nic -remote_cmd "ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
  register: __sap_ha_install_anydb_ibmdb2_config_aws_4
  when:
    - sap_ha_install_anydb_ibmdb2_hostname_primary == inventory_hostname_short
    - __sap_ha_install_anydb_ibmdb2_platform == "cloud_aws_ec2_vs"

# Deletion commands:
# export ibmdb2_sid=""
# export ibmdb2_instance=""
# export anydb_primary=""
# /db2/$ibmdb2_instance/sqllib/bin/db2cm -delete -primaryVIP -db $ibmdb2_sid -instance $ibmdb2_instance
# /db2/$ibmdb2_instance/sqllib/bin/db2cm -delete -aws -primaryVIP -db $ibmdb2_sid -instance $ibmdb2_instance
# /db2/$ibmdb2_instance/sqllib/bin/db2cm -delete -aws -fence
# /db2/$ibmdb2_instance/sqllib/bin/db2cm -delete -instance $ibmdb2_instance -host $anydb_primary
# /db2/$ibmdb2_instance/sqllib/bin/db2cm -delete -db $ibmdb2_sid -instance $ibmdb2_instance
# /db2/$ibmdb2_instance/sqllib/bin/db2cm -delete -cluster -db $ibmdb2_sid -instance $ibmdb2_instance
