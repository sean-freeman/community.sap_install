# SPDX-License-Identifier: Apache-2.0
---
# Common NWAS ASCS/ERS post-installation steps AFTER the cluster setup.

# SAPStartSrv resource agent / Simple Mount
- name: "SAP HA Pacemaker - Make sure SAPStartSrv systemd units are enabled"
  ansible.builtin.service:
    name: "{{ sapstartsrv_srv_item }}"
    enabled: true
  loop:
    - sapping
    - sappong
  loop_control:
    loop_var: sapstartsrv_srv_item
  when:
    - __sap_ha_pacemaker_cluster_nwas_cs_ers_simple_mount
  ignore_errors: "{{ ansible_check_mode }}"


# Block for configuring the SAP HA Interface (sap_cluster_connector).
#
# The 'sap-cluster-connector' package is already optionally added to
# '__sap_ha_pacemaker_cluster_sap_extra_packages'.
- name: "SAP HA Pacemaker - (SAP HA Interface) Configure SAP HA Interface"
  when:
    - sap_ha_pacemaker_cluster_enable_cluster_connector
  block:

    - name: "SAP HA Pacemaker - (SAP HA Interface) Add {{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm
       user to 'haclient' group"  # noqa name[template]
      ansible.builtin.user:
        name: "{{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm"
        groups: haclient
        append: true
        state: present

    # Using 'lineinfile' with a nested loop to avoid duplicate entries for existing configuration.
    - name: "SAP HA Pacemaker - (SAP HA Interface) Add connector to start profiles"
      ansible.builtin.lineinfile:
        backup: true
        path: "{{ nwas_profile_item.0 }}"
        line: "{{ nwas_profile_item.1 }}"
      loop: "{{ __sap_ha_pacemaker_cluster_nwas_scs_ers_profile_paths
              | product(__sap_ha_pacemaker_cluster_connector_config_lines)
             }}"
      loop_control:
        loop_var: nwas_profile_item
        label: "{{ nwas_profile_item.0 }} -> {{ nwas_profile_item.1 }}"
    # Throttle and retry loop was added to combat NFS write lockups on Azure NFS
      throttle: 1
      retries: "{{ 1 if ansible_check_mode else 30 }}"
      delay: "{{ 1 if ansible_check_mode else 10 }}"
      ignore_errors: "{{ ansible_check_mode }}"

    # Sleep added to resolve issue with WaitforStarted finishing before resources are available.
    - name: "SAP HA Pacemaker - (SAP HA Interface) Wait for SCS to be up and running"
      become: true
      become_user: "{{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm"
      register: __sap_ha_pacemaker_cluster_register_where_scs
      ansible.builtin.shell: |
        /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_scs_instance_nr }} -function WaitforStarted 600 30
      changed_when: false
      failed_when: false
      check_mode: false
      ignore_errors: "{{ ansible_check_mode }}"

    - name: "SAP HA Pacemaker - (SAP HA Interface) Wait for ERS to be up and running"
      become: true
      become_user: "{{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm"
      register: __sap_ha_pacemaker_cluster_register_where_ers
      ansible.builtin.shell: |
        /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_ers_instance_nr }} -function WaitforStarted 600 30
      changed_when: false
      failed_when: false
      check_mode: false
      ignore_errors: "{{ ansible_check_mode }}"

    # NOTE: RestartService can cause fencing lockup and hang forever,
    # it might be good to remove them in future and leave reload to "SCS ERS restart" block.
    - name: "SAP HA Pacemaker - (SAP HA Interface) Restart the SCS service"
      when:
        - __sap_ha_pacemaker_cluster_register_where_scs.rc is defined
        - __sap_ha_pacemaker_cluster_register_where_scs.rc == 0
      become: true
      become_user: "{{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm"
      register: __sap_ha_pacemaker_cluster_register_restart_scs
      ansible.builtin.shell: |
        /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_scs_instance_nr }} -function RestartService
      changed_when: __sap_ha_pacemaker_cluster_register_restart_scs.rc == 0

    - name: "SAP HA Pacemaker - (SAP HA Interface) Restart the ERS service"
      when:
        - __sap_ha_pacemaker_cluster_register_where_ers.rc is defined
        - __sap_ha_pacemaker_cluster_register_where_ers.rc == 0
      become: true
      become_user: "{{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm"
      register: __sap_ha_pacemaker_cluster_register_restart_ers
      ansible.builtin.shell: |
        /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_ers_instance_nr }} -function RestartService
      changed_when: __sap_ha_pacemaker_cluster_register_restart_ers.rc == 0


    - name: "SAP HA Pacemaker - (SAP HA Interface) Get HAGetFailoverConfig for SCS"
      when:
        - __sap_ha_pacemaker_cluster_register_where_scs.rc is defined
        - __sap_ha_pacemaker_cluster_register_where_scs.rc == 0
      become: true
      become_user: "{{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm"
      register: __sap_ha_pacemaker_cluster_register_scs_ha_failover_config
      ansible.builtin.shell: |
        sleep 10
        /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_scs_instance_nr }} -function HAGetFailoverConfig
      changed_when: false
      check_mode: false
      ignore_errors: "{{ ansible_check_mode }}"

    - name: "SAP HA Pacemaker - (SAP HA Interface) Get HAGetFailoverConfig for ERS"
      when:
        - __sap_ha_pacemaker_cluster_register_where_ers.rc is defined
        - __sap_ha_pacemaker_cluster_register_where_ers.rc == 0
      become: true
      become_user: "{{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm"
      register: __sap_ha_pacemaker_cluster_register_ers_ha_failover_config
      ansible.builtin.shell: |
        /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_ers_instance_nr }} -function HAGetFailoverConfig
      changed_when: false
      check_mode: false
      ignore_errors: "{{ ansible_check_mode }}"

    - name: "SAP HA Pacemaker - (SAP HA Interface) Display HAGetFailoverConfig results"
      when:
        - __sap_ha_pacemaker_cluster_register_where_scs.rc is defined
        - __sap_ha_pacemaker_cluster_register_where_scs.rc == 0
        - __sap_ha_pacemaker_cluster_register_scs_ha_failover_config.stdout_lines is defined
      ansible.builtin.debug:
        msg: |
          {{ __sap_ha_pacemaker_cluster_register_scs_ha_failover_config.stdout_lines }}


    - name: "SAP HA Pacemaker - (SAP HA Interface) Get HACheckConfig for SCS"
      when:
        - __sap_ha_pacemaker_cluster_register_where_scs.rc is defined
        - __sap_ha_pacemaker_cluster_register_where_scs.rc == 0
      become: true
      become_user: "{{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm"
      register: __sap_ha_pacemaker_cluster_register_scs_ha_check_config
      ansible.builtin.shell: |
        /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_scs_instance_nr }} -function HACheckConfig
      changed_when: false
      failed_when: false
      check_mode: false
      ignore_errors: "{{ ansible_check_mode }}"

    - name: "SAP HA Pacemaker - (SAP HA Interface) Display HACheckConfig results"
      when:
        - __sap_ha_pacemaker_cluster_register_where_scs.rc is defined
        - __sap_ha_pacemaker_cluster_register_where_scs.rc == 0
        - __sap_ha_pacemaker_cluster_register_scs_ha_check_config.stdout_lines is defined
      ansible.builtin.debug:
        msg: |
          {{ __sap_ha_pacemaker_cluster_register_scs_ha_check_config.stdout_lines }}


    # Ensure there are no errors before resources get restarted
    - name: "SAP HA Install Pacemaker - Cluster resource cleanup before restart"
      ansible.builtin.shell: |
        {{ __sap_ha_pacemaker_cluster_command.resource_cleanup }}
      changed_when: true

    # Block to restart cluster resources if RestartService is not enough.
    # This is required for SUSE, where SAP needs full restart to load HAlib.
    - name: "SAP HA Pacemaker - (SAP HA Interface) Block for SCS ERS restart"
      when:
        - "(__sap_ha_pacemaker_cluster_register_scs_ha_failover_config.stdout is defined
           and 'FALSE' in __sap_ha_pacemaker_cluster_register_scs_ha_failover_config.stdout)
          or (__sap_ha_pacemaker_cluster_register_ers_ha_failover_config.stdout is defined
           and 'FALSE' in __sap_ha_pacemaker_cluster_register_ers_ha_failover_config.stdout)
          or (__sap_ha_pacemaker_cluster_register_scs_ha_check_config.stdout is defined
           and 'ERROR' in __sap_ha_pacemaker_cluster_register_scs_ha_check_config.stdout)"
      vars:
        __rsc_scs: "{{ __sap_ha_pacemaker_cluster_nwas_scs_sapinstance_resource_name }}"
        __rsc_ers: "{{ __sap_ha_pacemaker_cluster_nwas_ers_sapinstance_resource_name }}"
      block:
        - name: "SAP HA Pacemaker - (SAP HA Interface) Restart SCS ERS resources"
          ansible.builtin.shell: |
            {{ __sap_ha_pacemaker_cluster_command.resource_restart }} {{ restart_item }}
          loop:
            - "{{ __rsc_scs }}"
            - "{{ __rsc_ers }}"
          loop_control:
            loop_var: restart_item
          when:
            - __sap_ha_pacemaker_cluster_register_where_scs.rc == 0
          changed_when: true

        - name: "SAP HA Pacemaker - (SAP HA Interface) Wait for SCS to be up and running"
          become: true
          become_user: "{{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm"
          register: __sap_ha_pacemaker_cluster_register_where_scs_restart
          ansible.builtin.shell: |
            /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_scs_instance_nr }} -function WaitforStarted 600 30
          changed_when: false
          failed_when: false

        - name: "SAP HA Pacemaker - (SAP HA Interface) Wait for ERS to be up and running"
          become: true
          become_user: "{{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm"
          register: __sap_ha_pacemaker_cluster_register_where_ers_restart
          ansible.builtin.shell: |
            /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_ers_instance_nr }} -function WaitforStarted 600 30
          changed_when: false
          failed_when: false

        # Ensure there are no errors after resources were restarted
        - name: "SAP HA Install Pacemaker - Cluster resource cleanup after restart"
          ansible.builtin.shell: |
            {{ __sap_ha_pacemaker_cluster_command.resource_cleanup }}
          changed_when: true

    ### END of BLOCK for instance restarts.


    - name: "SAP HA Pacemaker - (SAP HA Interface) Get HACheckConfig for SCS"
      when:
        - __sap_ha_pacemaker_cluster_register_where_scs.rc is defined
        - __sap_ha_pacemaker_cluster_register_where_scs.rc == 0
      become: true
      become_user: "{{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm"
      register: __sap_ha_pacemaker_cluster_register_scs_ha_check_config
      ansible.builtin.shell: |
        sleep 30
        /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_scs_instance_nr }} -function HACheckConfig
      changed_when: false
      failed_when:
        - "'ERROR' in __sap_ha_pacemaker_cluster_register_scs_ha_check_config.stdout"
      check_mode: false
      ignore_errors: "{{ ansible_check_mode }}"

    - name: "SAP HA Pacemaker - (SAP HA Interface) Get HACheckConfig for ERS"
      when:
        - __sap_ha_pacemaker_cluster_register_where_ers.rc is defined
        - __sap_ha_pacemaker_cluster_register_where_ers.rc == 0
      become: true
      become_user: "{{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm"
      register: __sap_ha_pacemaker_cluster_register_ers_ha_check_config
      ansible.builtin.shell: |
        /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_ers_instance_nr }} -function HACheckConfig
      changed_when: false
      failed_when:
        - "'ERROR' in __sap_ha_pacemaker_cluster_register_ers_ha_check_config.stdout"
      check_mode: false
      ignore_errors: "{{ ansible_check_mode }}"


    - name: "SAP HA Pacemaker - (SAP HA Interface) Get HAGetFailoverConfig for SCS"
      when:
        - __sap_ha_pacemaker_cluster_register_where_scs.rc is defined
        - __sap_ha_pacemaker_cluster_register_where_scs.rc == 0
      become: true
      become_user: "{{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm"
      register: __sap_ha_pacemaker_cluster_register_scs_ha_failover_config
      ansible.builtin.shell: |
        /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_scs_instance_nr }} -function HAGetFailoverConfig
      changed_when: false
      check_mode: false
      ignore_errors: "{{ ansible_check_mode }}"
      # failed_when:
      #   - __sap_ha_pacemaker_cluster_register_scs_ha_failover_config.stdout is defined
      #      and 'FALSE' in __sap_ha_pacemaker_cluster_register_scs_ha_failover_config.stdout

    - name: "SAP HA Pacemaker - (SAP HA Interface) Get HAGetFailoverConfig for ERS"
      when:
        - __sap_ha_pacemaker_cluster_register_where_ers.rc is defined
        - __sap_ha_pacemaker_cluster_register_where_ers.rc == 0
      become: true
      become_user: "{{ __sap_ha_pacemaker_cluster_nwas_sid | lower }}adm"
      register: __sap_ha_pacemaker_cluster_register_ers_ha_failover_config
      ansible.builtin.shell: |
        /usr/sap/hostctrl/exe/sapcontrol -nr {{ __sap_ha_pacemaker_cluster_nwas_ers_instance_nr }} -function HAGetFailoverConfig
      changed_when: false
      check_mode: false
      ignore_errors: "{{ ansible_check_mode }}"
      # failed_when:
      #   - __sap_ha_pacemaker_cluster_register_ers_ha_failover_config.stdout is defined
      #      and 'FALSE' in __sap_ha_pacemaker_cluster_register_ers_ha_failover_config.stdout


    # HAGetFailoverConfig is not consistent and it can show FALSE on one of nodes
    - name: "SAP HA Pacemaker - (SAP HA Interface) Display HAGetFailoverConfig results on SCS"
      when:
        - __sap_ha_pacemaker_cluster_register_where_scs.rc is defined
        - __sap_ha_pacemaker_cluster_register_where_scs.rc == 0
        - __sap_ha_pacemaker_cluster_register_scs_ha_failover_config.stdout_lines is defined
      ansible.builtin.debug:
        msg: |
          {{ __sap_ha_pacemaker_cluster_register_scs_ha_failover_config.stdout_lines }}

    # HAGetFailoverConfig is not consistent and it can show FALSE on one of nodes
    - name: "SAP HA Pacemaker - (SAP HA Interface) Display HAGetFailoverConfig results on ERS"
      when:
        - __sap_ha_pacemaker_cluster_register_where_ers.rc is defined
        - __sap_ha_pacemaker_cluster_register_where_ers.rc == 0
        - __sap_ha_pacemaker_cluster_register_ers_ha_failover_config.stdout_lines is defined
      ansible.builtin.debug:
        msg: |
          {{ __sap_ha_pacemaker_cluster_register_ers_ha_failover_config.stdout_lines }}

    # HACheckConfig shows same statues on both nodes, therefore only SCS is shown
    - name: "SAP HA Pacemaker - (SAP HA Interface) Display HACheckConfig results"
      when:
        - __sap_ha_pacemaker_cluster_register_where_scs.rc is defined
        - __sap_ha_pacemaker_cluster_register_where_scs.rc == 0
        - __sap_ha_pacemaker_cluster_register_scs_ha_check_config.stdout_lines is defined
      ansible.builtin.debug:
        msg: |
          {{ __sap_ha_pacemaker_cluster_register_scs_ha_check_config.stdout_lines }}


    # TODO: verification checks that the instances are running and HA Interface is enabled

### END of BLOCK for sap_cluster_connector.
