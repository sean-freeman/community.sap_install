# SPDX-License-Identifier: Apache-2.0
---

- name: Query installed zypper patterns
  ansible.builtin.command:
    cmd: zypper patterns --installed-only
  register: __sap_netweaver_preconfigure_register_patterns
  changed_when: false
  ignore_errors: true

- name: Assert that all required zypper patterns are installed
  ansible.builtin.assert:
    that: "'{{ item }}' in __sap_netweaver_preconfigure_register_patterns.stdout"
    fail_msg: "FAIL: Pattern '{{ item }}' is not installed!"
    success_msg: "PASS: Pattern '{{ item }}' is installed."
  loop: "{{ sap_netweaver_preconfigure_patterns }}"
  ignore_errors: "{{ sap_netweaver_preconfigure_assert_ignore_errors | d(false) }}"

# Check rpm --whatprovides only if package cannot be found directly.
- name: Query RPM packages
  ansible.builtin.shell:
    cmd: |
      if rpm -q {{ item }} &> /dev/null;
      then rpm -q {{ item }}
      else rpm -q --whatprovides {{ item }};
      fi
  register: __sap_netweaver_preconfigure_register_packages
  changed_when: false
  ignore_errors: true
  loop: "{{ sap_netweaver_preconfigure_packages }}"


- name: Assert that all required packages are installed
  ansible.builtin.assert:
    that: __sap_netweaver_preconfigure_register_packages.results | selectattr('item', 'equalto', item) | map(attribute='rc') | first == 0
    fail_msg: "FAIL: Package '{{ item }}' is not installed!"
    success_msg: "PASS: Package '{{ item }}' is installed."
  loop: "{{ sap_netweaver_preconfigure_packages }}"
  ignore_errors: "{{ sap_netweaver_preconfigure_assert_ignore_errors | d(false) }}"


- name: Gather service facts
  ansible.builtin.service_facts:

# Service packagekit is part of PackageKit-backend-zypp (SLE-Module-Desktop-Applications)
# This service creates zypper locks and causes package install failures.
- name: Wait for stop of packagekit.service
  ansible.builtin.shell: |
    set -o pipefail && bash -c '
    while (ps aux | grep "[z]ypper" | grep -v grep) || (ps aux | grep "/usr/lib/packagekitd" | grep -v grep) ||
     ([ -f /var/run/zypp.pid ] && [ -s /var/run/zypp.pid ]); do
      sleep 10;
    done'
  register: __packagekit_service_check
  changed_when: false
  until: __packagekit_service_check.rc == 0
  retries: 60
  when: "'packagekit.service' in ansible_facts.services"

- name: Get info about possible package updates # noqa command-instead-of-module
  ansible.builtin.command:
    cmd: zypper -q patch-check
  timeout: 60
  register: __sap_netweaver_preconfigure_register_zypper_check_update_assert
  changed_when: false
  ignore_errors: true  # true, because unpatched system is always error.
  when: sap_netweaver_preconfigure_update

- name: Assert that there are no more possible package updates
  ansible.builtin.assert:
    that: __sap_netweaver_preconfigure_register_zypper_check_update_assert.rc == 0
    fail_msg: "FAIL: System needs to be updated!"
    success_msg: "PASS: There are no more outstanding package updates."
  ignore_errors: "{{ sap_netweaver_preconfigure_assert_ignore_errors | d(false) }}"
  when: sap_netweaver_preconfigure_update

- name: Report if checking for possible package updates is not requested
  ansible.builtin.debug:
    msg: "INFO: Not checking for possible package updates (variable sap_netweaver_preconfigure_update)."
  ignore_errors: "{{ sap_netweaver_preconfigure_assert_ignore_errors | d(false) }}"
  when: not sap_netweaver_preconfigure_update


# Reason for noqa: The command to be executed might contain pipes
- name: Determine if the system needs to be restarted # noqa command-instead-of-shell
  ansible.builtin.shell:
    cmd: "zypper ps"
  retries: 60
  timeout: 5
  register: __sap_netweaver_preconfigure_register_needs_restarting_assert
  changed_when: false
  check_mode: false
  ignore_errors: true  # true, because output is too large.

- name: Assert that system needs no restart
  ansible.builtin.assert:
    that: __sap_netweaver_preconfigure_register_needs_restarting_assert is success
    fail_msg: "FAIL: System needs to be restarted!"
    success_msg: "PASS: System needs no restart."
  ignore_errors: "{{ sap_netweaver_preconfigure_assert_ignore_errors | d(false) }}"


- name: Block to assert that correct saptune version is installed
  when:
    - __sap_netweaver_preconfigure_use_saptune
    - sap_netweaver_preconfigure_saptune_version is defined
    - sap_netweaver_preconfigure_saptune_version | length > 0
  block:
    # We are checking for %{VERSION} (e.g. 3.1.4), not full %{VERSION}-%{RELEASE}.%{ARCH}
    - name: Check saptune version  # noqa: command-instead-of-module
      ansible.builtin.command:
        cmd: rpm -q --queryformat '%{VERSION}\n' saptune
      register: __sap_netweaver_preconfigure_register_saptune_version
      changed_when: false
      ignore_errors: true

    - name: Assert saptune is at requested version
      ansible.builtin.assert:
        that: __sap_netweaver_preconfigure_register_saptune_version.stdout == sap_netweaver_preconfigure_saptune_version
        fail_msg: "FAIL: saptune version installed is {{ __sap_netweaver_preconfigure_register_saptune_version.stdout
          }} but the version {{ sap_netweaver_preconfigure_saptune_version }} was expected"
        success_msg: "PASS: the installed version of saptune meets the expected version: {{ sap_netweaver_preconfigure_saptune_version }}"
      when: __sap_netweaver_preconfigure_register_saptune_version.rc = 0
